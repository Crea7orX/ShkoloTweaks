name: Build & Release Chrome Extension

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.check_version.outputs.release }}
      version: ${{ steps.manifest.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq & GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Get version from manifest.json
        id: manifest
        run: |
          VERSION=$(jq -r .version src/manifest.json)
          echo "Extension version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get latest GitHub release version
        id: latest_release
        run: |
          LATEST=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "none")
          echo "Latest release tag: $LATEST"
          
          BASE_VERSION=$(echo $LATEST | sed -E 's/^v//;s/-auto.*//')
          BASE_MINOR=$(echo "$BASE_VERSION" | cut -d. -f1,2)
          echo "Base minor version: $BASE_MINOR"
          echo "latest_minor=$BASE_MINOR" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if minor version changed
        id: check_version
        run: |
          MANIFEST_VERSION="${{ steps.manifest.outputs.version }}"
          MANIFEST_MINOR=$(echo "$MANIFEST_VERSION" | cut -d. -f1,2)

          echo "Manifest minor version: $MANIFEST_MINOR"

          if [[ "$MANIFEST_MINOR" == "${{ steps.latest_release.outputs.latest_minor }}" ]]; then
            echo "Minor version unchanged, skipping release."
            echo "release=false" >> $GITHUB_OUTPUT
          else
            echo "New minor version detected."
            echo "release=true" >> $GITHUB_OUTPUT
          fi

  build-release:
    needs: check-version
    if: needs.check-version.outputs.release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Build Chrome Extension
        run: |
          python Tools/build_extension.py

      - name: Zip extension files
        run: |
          cd dist/extension
          zip -r ../../extension.zip .
          cd ../..

      - name: Delete all AUTO releases and tags
        run: |
          echo "Looking for old AUTO releases..."
          RELEASES=$(gh release list --json tagName --jq '.[].tagName')
          for RELEASE in $RELEASES; do
            if [[ $RELEASE == *-auto ]]; then
              echo "Found AUTO release with tag: $RELEASE, deleting..."
              gh release delete $RELEASE --yes
              git tag -d $RELEASE
              git push origin --delete $RELEASE
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ needs.check-version.outputs.version }} - Auto Release - ${{ github.sha }}
          tag_name: v${{ needs.check-version.outputs.version }}-auto-${{ github.sha }}
          files: extension.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
